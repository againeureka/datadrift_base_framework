#-----------------------------------------
#                실행 방법
#-----------------------------------------
#
# 1. 홈 위치에 .datadrift 폴더를 만듭니다. 
#    mkdir ~/.datadrift
#
# 2. 도커 컴포즈를 실행합니다.
#    docker compose up
#
#-----------------------------------------

# JPark @ KETI, 2024
services:
    app:
        build:
            context: ./web
            dockerfile: Dockerfile
        container_name: datadrift_base_framework
        volumes:
            - ./web:/var/www/html:rw
        user: 1000:999 # 현재 사용자의 UID와 GID로 설정
        networks:
            - dev_network
        environment:
          - APP_ENV=local
          - APP_DEBUG=true
      
    nginx:
        image: nginx
        ports:
            - 80:80
        volumes:
            - ./web:/var/www/html
            - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - php
            - app
        env_file:
            - .env
        networks:
            - dev_network

    db:
        image: mariadb:latest    
        container_name: mariadb
        ports:
            #- ${IP}:3300:3306 # [중요] 실 서비스에서는 보안 개선을 위해 수정 필요
            - 3306:3306 # 임시로 '${IP}:' 헤더를 제거
        volumes:
            - ~/.datadrift/mariadb:/var/lib/mysql # maridadb data
            - ./config/mariadb/init.sql:/docker-entrypoint-initdb.d/init.sql     
        environment:
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
            MYSQL_DATABASE: ${DB_NAME}
            MYSQL_USER: ${DB_USER}
            MYSQL_PASSWORD: ${DB_USER_PASSWORD}
            TZ: Asia/Seoul
        networks:
            - dev_network
        env_file:
            - .env
           
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        container_name: phpmyadmin
        environment:
            PMA_HOST: db
            PMA_PORT: 3306
            MYSQL_ROOT_PASSWORD: ${DB_USER_PASSWORD}
            MYSQL_USER: ${DB_USER}
            MYSQL_PASSWORD: ${DB_USER_PASSWORD}
        ports:
            #- ${IP}:8000:80 # 보안 강화 (실제 서비스에 적용)
            - 8000:80 # 임시
        env_file:
            - .env
        networks:
            - dev_network

    php:
        build:
            context: ./config/php
            dockerfile: Dockerfile
        #image: php:8.2-fpm
        #container_name: php_app
        #working_dir: /var/www/html
        ports:
            - 9000:9000
        volumes:
            #- ./web:/var/www/html:delegated
            - ./web:/var/www/html:rw
            - ./config/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
            - ./config/php/php.ini:/usr/local/etc/php/php.ini
        command: bash -c "docker-php-ext-install pdo pdo_mysql && docker-php-entrypoint php-fpm" # 동적으로 확장모듈 설치
        environment:
            PHP_EXTENSION: zip  # zip 확장 사용
            MYSQL_USER: ${DB_USER}
            MYSQL_PASSWORD: ${DB_USER_PASSWORD}
        depends_on:
            - db
        env_file:
            - .env
        networks:
            - dev_network

    grafana:
        image: grafana/grafana-oss:latest
        user: "$UID:$GID" # 현재 사용자의 UID와 GID로 설정
        #user: "472"
        container_name: grafana
        #restart: unless-stopped
        restart: always
        ports:
            - 3000:3000 # 접근 포트 설정 (컨테이너 외부:컨테이너 내부)
        volumes:
            - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
            - ./config/grafana/provisioning/:/etc/grafana/provisioning/
            #- ./config/grafana/defaults.ini:/usr/share/grafana/conf/defaults.ini
            - ~/.datadrift/grafana:/var/lib/grafana
        environment:            
            #- GF_SERVER_ROOT_URL=http://192.168.1.6:3000/grafana/
            - GF_SERVER_ROOT_URL=http://datadoctor.kr/grafana/
            - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_SECURITY_ALLOW_EMBEDDING=true
            - GF_SECURITY_LOGIN_REMEMBER_DAYS=365
            - GF_DEFAULT_APP_MODE=development
            - GF_ENABLE_GZIP=true
            - GF_SERVER_SERVE_FROM_SUB_PATH=true
            - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-worldmap-panel,marcusolsson-csv-datasource,frser-sqlite-datasource,grafana-simple-json-datasource,innius-video-panel,jdbranham-diagram-panel,volkovlabs-image-panel,redis-app,redis-datasource,redis-explorer-app
            #- GF_RENDERING_SERVER_URL=http://renderer:8081/render
            #- GF_RENDERING_CALLBACK_URL=http://grafana:3000/
            #- GF_LOG_FILTERS=rendering:debug
        expose:
            - 3000
        env_file:
            - .env
        networks:
            - dev_network
           
    # (참고) redis 기초 명령어 : https://tgyun615.com/192
    redis:
        image: redislabs/redisai
        container_name: redisai
        #environment:
        #    - REDIS_PASSWORD=
        #command: redis-server --requirepass $REDIS_PASSWORD
        ports:
            - 6379:6379
        volumes:
            - ~/.datadrift/redis/data:/data
        restart: always
        networks:
            - dev_network
        env_file:
            - .env

    redis-commander:
        container_name: redis-commander
        hostname: redis-commander
        image: rediscommander/redis-commander:latest
        restart: always
        environment:
            - REDIS_HOST=redis
            - REDIS_PORT=6379
            #- REDIS_PASSWORD=$REDIS_PASSWORD
            - HTTP_USER=dev
            - HTTP_PASSWORD=dev
        ports:
            - 8091:8081
        env_file:
            - .env
        networks:
            - dev_network
            
networks:
    dev_network:
        driver: bridge
